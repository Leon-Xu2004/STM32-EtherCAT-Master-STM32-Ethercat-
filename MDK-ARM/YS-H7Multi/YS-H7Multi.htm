<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [YS-H7Multi\YS-H7Multi.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image YS-H7Multi\YS-H7Multi.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sat Jul 19 16:35:37 2025
<BR><P>
<H3>Maximum Stack Usage =       3940 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
USART3_IRQHandler &rArr; ProcessReceivedData &rArr; SerialCmd_Execute &rArr; ecat_init &rArr; ec_config_map &rArr; ec_config_map_group &rArr; ecx_config_map_group &rArr; ecx_config_find_mappings &rArr; ecx_map_coe_soe &rArr; ecx_readIDNmap &rArr; ecx_SoEread &rArr; ecx_mbxreceive &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[81]">ADC3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[81]">ADC3_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[81]">ADC3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[83]">BDMA_Channel0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[84]">BDMA_Channel1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[85]">BDMA_Channel2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[86]">BDMA_Channel3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[87]">BDMA_Channel4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[88]">BDMA_Channel5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[89]">BDMA_Channel6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8a]">BDMA_Channel7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32h7xx_it.o(i.BusFault_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[62]">CEC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8b]">COMP1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[91]">CRS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[53]">DCMI_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[72]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[73]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[74]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[75]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[38]">DMA1_Stream7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5e]">DMA2D_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[41]">DMA2_Stream0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[49]">DMA2_Stream5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4a]">DMA2_Stream6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4b]">DMA2_Stream7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6a]">DMAMUX1_OVR_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[82]">DMAMUX2_OVR_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32h7xx_it.o(i.DebugMon_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[46]">ETH_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[47]">ETH_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1d]">FDCAN1_IT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1f]">FDCAN1_IT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1e]">FDCAN2_IT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[20]">FDCAN2_IT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[48]">FDCAN_CAL_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[39]">FMC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[55]">FPU_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[71]">HRTIM1_FLT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6b]">HRTIM1_Master_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6c]">HRTIM1_TIMA_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6d]">HRTIM1_TIMB_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6e]">HRTIM1_TIMC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6f]">HRTIM1_TIMD_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[70]">HRTIM1_TIME_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[80]">HSEM1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32h7xx_it.o(i.HardFault_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4e]">I2C3_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4d]">I2C3_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[64]">I2C4_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[63]">I2C4_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7d]">JPEG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[61]">LPTIM1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8c]">LPTIM2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8d]">LPTIM3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8e]">LPTIM4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8f]">LPTIM5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[90]">LPUART1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5d]">LTDC_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5c]">LTDC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7c]">MDIOS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7b]">MDIOS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7e]">MDMA_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32h7xx_it.o(i.MemManage_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32h7xx_it.o(i.NMI_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[67]">OTG_FS_EP1_IN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[66]">OTG_FS_EP1_OUT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[69]">OTG_FS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[68]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[50]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4f]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[52]">OTG_HS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[51]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[b]">PVD_AVD_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32h7xx_it.o(i.PendSV_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[60]">QUADSPI_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[54]">RNG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5b]">SAI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5f]">SAI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[76]">SAI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[92]">SAI4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3a]">SDMMC1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7f]">SDMMC2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[65]">SPDIF_RX_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3c]">SPI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[58]">SPI4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[59]">SPI5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5a]">SPI6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32h7xx_it.o(i.SVC_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[77]">SWPMI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32h7xx_it.o(i.SysTick_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[95]">SystemInit</a> from system_stm32h7xx.o(i.SystemInit) referenced from startup_stm32h743xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[78]">TIM15_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[79]">TIM16_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7a]">TIM17_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from stm32h7xx_it.o(i.TIM4_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3b]">TIM5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3f]">TIM6_DAC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[40]">TIM7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[34]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[37]">TIM8_CC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[36]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[35]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3d]">UART4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3e]">UART5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[56]">UART7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[57]">UART8_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[97]">UART_DMAAbortOnError</a> from stm32h7xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32h7xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[9a]">UART_DMAError</a> from stm32h7xx_hal_uart.o(i.UART_DMAError) referenced from stm32h7xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[98]">UART_DMAReceiveCplt</a> from stm32h7xx_hal_uart.o(i.UART_DMAReceiveCplt) referenced from stm32h7xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[99]">UART_DMARxHalfCplt</a> from stm32h7xx_hal_uart.o(i.UART_DMARxHalfCplt) referenced from stm32h7xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from stm32h7xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4c]">USART6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32h7xx_it.o(i.UsageFault_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[93]">WAKEUP_PIN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[9d]">Zeroer_Nsetup</a> from soem.o(i.Zeroer_Nsetup) referenced from soem.o(i.ecat_init)
 <LI><a href="#[96]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32h743xx.o(.text)
 <LI><a href="#[9c]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[9b]">fputc</a> from bsp_debug_usart.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[94]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[96]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(.text)
</UL>
<P><STRONG><a name="[1bf]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[9e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b5]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1c0]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1c1]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1c2]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1c3]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1c4]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>BDMA_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>BDMA_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>BDMA_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>BDMA_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>BDMA_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>BDMA_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>BDMA_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>BDMA_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>COMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>DMAMUX2_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>FDCAN2_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>FDCAN2_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>FDCAN_CAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>HRTIM1_FLT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>HRTIM1_Master_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>HRTIM1_TIMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>HRTIM1_TIMB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>HRTIM1_TIMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>HRTIM1_TIMD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>HRTIM1_TIME_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>HSEM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>JPEG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>LPTIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>LPTIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>LPTIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>MDIOS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>MDIOS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>MDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>OTG_FS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>OTG_FS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_AVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>SAI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>SAI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>SDMMC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>WAKEUP_PIN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorController_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[a3]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorController_Update
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_dcsync0
</UL>

<P><STRONG><a name="[137]"></a>toupper</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, toupper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialCmd_ParseLine
</UL>

<P><STRONG><a name="[150]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bfin_EMAC_send
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bfin_EMAC_recv
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BRD
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APRD
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_writedatagramdata
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_inframe
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_waitinframe_red
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOwrite
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOread
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SoEread
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_receive_processdata_group
</UL>

<P><STRONG><a name="[1ac]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_lookup_prev_sii
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_pusherror
</UL>

<P><STRONG><a name="[1c5]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1c6]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1c7]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_writedatagramdata
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_clearmbx
</UL>

<P><STRONG><a name="[112]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReceivedData
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorToPulsePosition
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UARTx_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_GPIO_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialCmd_ParseLine
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siigetbyte
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_init_context
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_set_slaves_to_default
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_map_sii
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_packeterror
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxreceive
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOerror
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SoEerror
</UL>

<P><STRONG><a name="[1c8]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[136]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialCmd_ParseLine
</UL>

<P><STRONG><a name="[139]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialCmd_ParseLine
</UL>

<P><STRONG><a name="[193]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_from_table
</UL>

<P><STRONG><a name="[138]"></a>strtok</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialCmd_ParseLine
</UL>

<P><STRONG><a name="[a7]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialCmd_ParseLine
</UL>

<P><STRONG><a name="[1c9]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[a2]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1ca]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1cb]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[1cc]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b0]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[b1]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b3]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b4]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[14a]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[9f]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1cd]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1ce]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[ab]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[af]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[ae]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[b6]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[1cf]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1d0]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>ETH_PHY_ReadReg</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lan8720.o(i.ETH_PHY_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ETH_PHY_ReadReg &rArr; HAL_ETH_ReadPHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8720A_StartAutoNego
</UL>

<P><STRONG><a name="[bc]"></a>ETH_PHY_WriteReg</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lan8720.o(i.ETH_PHY_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ETH_PHY_WriteReg &rArr; HAL_ETH_WritePHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8720A_StartAutoNego
</UL>

<P><STRONG><a name="[1bd]"></a>GetSec</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_generaltim.o(i.GetSec))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_current_time
</UL>

<P><STRONG><a name="[1be]"></a>GetUSec</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_generaltim.o(i.GetUSec))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_current_time
</UL>

<P><STRONG><a name="[be]"></a>HAL_DMA_Abort</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, stm32h7xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
</UL>

<P><STRONG><a name="[ff]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, stm32h7xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[13e]"></a>HAL_DMA_GetError</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(i.HAL_DMA_GetError))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[c0]"></a>HAL_DMA_Init</STRONG> (Thumb, 408 bytes, Stack size 40 bytes, stm32h7xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_DMA_Init &rArr; DMA_CalcDMAMUXChannelBaseAndMask
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXRequestGenBaseAndMask
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXChannelBaseAndMask
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UARTx_Init
</UL>

<P><STRONG><a name="[c5]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, stm32h7xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
</UL>

<P><STRONG><a name="[c7]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32h7xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoverFromFault
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY4_StateRead
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY3_StateRead
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY2_StateRead
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY1_StateRead
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialCmd_Execute
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecat_init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zeroer_CSPInit
</UL>

<P><STRONG><a name="[12d]"></a>HAL_ETH_BuildRxDescriptors</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_BuildRxDescriptors))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_ETH_BuildRxDescriptors
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bfin_EMAC_recv
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Init
</UL>

<P><STRONG><a name="[12a]"></a>HAL_ETH_DescAssignMemory</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_DescAssignMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_ETH_DescAssignMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Init
</UL>

<P><STRONG><a name="[12b]"></a>HAL_ETH_GetMACConfig</STRONG> (Thumb, 460 bytes, Stack size 0 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_GetMACConfig))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Init
</UL>

<P><STRONG><a name="[128]"></a>HAL_ETH_GetMACFilterConfig</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_GetMACFilterConfig))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Init
</UL>

<P><STRONG><a name="[c8]"></a>HAL_ETH_GetRxDataBuffer</STRONG> (Thumb, 172 bytes, Stack size 28 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_GetRxDataBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_ETH_GetRxDataBuffer &rArr; HAL_ETH_IsRxDataAvailable
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IsRxDataAvailable
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bfin_EMAC_recv
</UL>

<P><STRONG><a name="[ca]"></a>HAL_ETH_GetRxDataLength</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_GetRxDataLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_ETH_GetRxDataLength &rArr; HAL_ETH_IsRxDataAvailable
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IsRxDataAvailable
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bfin_EMAC_recv
</UL>

<P><STRONG><a name="[cb]"></a>HAL_ETH_Init</STRONG> (Thumb, 484 bytes, Stack size 24 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = HAL_ETH_Init &rArr; ETH_MACDMAConfig &rArr; ETH_SetMACConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSCFG_ETHInterfaceSelect
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMAConfig
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ETH_Init
</UL>

<P><STRONG><a name="[c9]"></a>HAL_ETH_IsRxDataAvailable</STRONG> (Thumb, 202 bytes, Stack size 20 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_IsRxDataAvailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_ETH_IsRxDataAvailable
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_GetRxDataLength
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_GetRxDataBuffer
</UL>

<P><STRONG><a name="[cc]"></a>HAL_ETH_MspInit</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, ethernetif.o(i.HAL_ETH_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_ETH_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[bb]"></a>HAL_ETH_ReadPHYRegister</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_ReadPHYRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ETH_ReadPHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PHY_ReadReg
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8720_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8720_GetLinkState
</UL>

<P><STRONG><a name="[d1]"></a>HAL_ETH_SetMACConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_SetMACConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_ETH_SetMACConfig &rArr; ETH_SetMACConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SetMACConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Init
</UL>

<P><STRONG><a name="[129]"></a>HAL_ETH_SetMACFilterConfig</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_SetMACFilterConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_ETH_SetMACFilterConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Init
</UL>

<P><STRONG><a name="[12c]"></a>HAL_ETH_Start_IT</STRONG> (Thumb, 182 bytes, Stack size 12 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_ETH_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Init
</UL>

<P><STRONG><a name="[d2]"></a>HAL_ETH_Transmit</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
</UL>

<P><STRONG><a name="[bd]"></a>HAL_ETH_WritePHYRegister</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_WritePHYRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ETH_WritePHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PHY_WriteReg
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8720_Init
</UL>

<P><STRONG><a name="[cf]"></a>HAL_GPIO_Init</STRONG> (Thumb, 450 bytes, Stack size 40 bytes, stm32h7xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UARTx_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_GPIO_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
</UL>

<P><STRONG><a name="[10d]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY4_StateRead
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY3_StateRead
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY2_StateRead
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY1_StateRead
</UL>

<P><STRONG><a name="[132]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialCmd_Execute
</UL>

<P><STRONG><a name="[d0]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
</UL>

<P><STRONG><a name="[bf]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Transmit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[13a]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[d4]"></a>HAL_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32h7xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d6]"></a>HAL_InitTick</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32h7xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[11a]"></a>HAL_MPU_ConfigRegion</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, stm32h7xx_hal_cortex.o(i.HAL_MPU_ConfigRegion))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_MPU_ConfigRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
</UL>

<P><STRONG><a name="[119]"></a>HAL_MPU_Disable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_MPU_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
</UL>

<P><STRONG><a name="[11b]"></a>HAL_MPU_Enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_MPU_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
</UL>

<P><STRONG><a name="[d7]"></a>HAL_MspInit</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, stm32h7xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[e9]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UARTx_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>

<P><STRONG><a name="[d9]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32h7xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UARTx_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>

<P><STRONG><a name="[d5]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32h7xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[db]"></a>HAL_RCCEx_GetD1SysClockFreq</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_GetD1SysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_RCCEx_GetD1SysClockFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>

<P><STRONG><a name="[dd]"></a>HAL_RCCEx_GetD3PCLK1Freq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_GetD3PCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_RCCEx_GetD3PCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCCEx_GetD1SysClockFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[141]"></a>HAL_RCCEx_GetPLL2ClockFreq</STRONG> (Thumb, 268 bytes, Stack size 12 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPLL2ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RCCEx_GetPLL2ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[142]"></a>HAL_RCCEx_GetPLL3ClockFreq</STRONG> (Thumb, 268 bytes, Stack size 12 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPLL3ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RCCEx_GetPLL3ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[e2]"></a>HAL_RCC_CSSCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_CSSCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_NMI_IRQHandler
</UL>

<P><STRONG><a name="[de]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 458 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[13c]"></a>HAL_RCC_EnableCSS</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_EnableCSS))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[ce]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_RCC_GetHCLKFreq &rArr; HAL_RCCEx_GetD1SysClockFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD1SysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[df]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCCEx_GetD1SysClockFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[e0]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCCEx_GetD1SysClockFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[dc]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 286 bytes, Stack size 20 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD1SysClockFreq
</UL>

<P><STRONG><a name="[e1]"></a>HAL_RCC_NMI_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_NMI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_NMI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_CSSCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>

<P><STRONG><a name="[e3]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1186 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[cd]"></a>HAL_SYSCFG_ETHInterfaceSelect</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal.o(i.HAL_SYSCFG_ETHInterfaceSelect))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[13d]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[e5]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.HAL_SYSTICK_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[d8]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32h7xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[e4]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32h7xx_hal_cortex.o(i.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[f4]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[f6]"></a>HAL_TIMEx_CommutationCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim_ex.o(i.HAL_TIMEx_CommutationCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[11e]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32h7xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[e6]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[e7]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, bsp_generaltim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[11f]"></a>HAL_TIM_Base_Start</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_Base_Start))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[134]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialCmd_Execute
</UL>

<P><STRONG><a name="[ea]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[f0]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[ef]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 382 bytes, Stack size 16 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; ecat_loop &rArr; ec_send_processdata &rArr; ec_send_processdata_group &rArr; ecx_main_send_processdata &rArr; ecx_outframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutationCallback
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[f1]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[f2]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[f3]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = HAL_TIM_PeriodElapsedCallback &rArr; ecat_loop &rArr; ec_send_processdata &rArr; ec_send_processdata_group &rArr; ecx_main_send_processdata &rArr; ecx_outframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecat_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[f8]"></a>HAL_TIM_SlaveConfigSynchronization</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_SlaveConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_SlaveConfigSynchronization &rArr; TIM_SlaveTimer_SetConfig &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SlaveTimer_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[f5]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[101]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart_ex.o(i.HAL_UARTEx_WakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[fa]"></a>HAL_UART_DMAStop</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(i.HAL_UART_DMAStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_DMAStop &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[100]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[fd]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 374 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[104]"></a>HAL_UART_Init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCCEx_GetD3PCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCCEx_GetD1SysClockFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UARTx_Init
</UL>

<P><STRONG><a name="[105]"></a>HAL_UART_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(i.HAL_UART_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[109]"></a>HAL_UART_Receive_DMA</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(i.HAL_UART_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UARTx_Init
</UL>

<P><STRONG><a name="[13f]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[140]"></a>HAL_UART_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(i.HAL_UART_RxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
</UL>

<P><STRONG><a name="[10a]"></a>HAL_UART_Transmit</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, stm32h7xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[103]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[10c]"></a>KEY1_StateRead</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, bsp_key.o(i.KEY1_StateRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KEY1_StateRead &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10e]"></a>KEY2_StateRead</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, bsp_key.o(i.KEY2_StateRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KEY2_StateRead &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10f]"></a>KEY3_StateRead</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, bsp_key.o(i.KEY3_StateRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KEY3_StateRead &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[110]"></a>KEY4_StateRead</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, bsp_key.o(i.KEY4_StateRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KEY4_StateRead &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[111]"></a>KEY_GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, bsp_key.o(i.KEY_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = KEY_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[113]"></a>LAN8720A_StartAutoNego</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lan8720.o(i.LAN8720A_StartAutoNego))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LAN8720A_StartAutoNego &rArr; ETH_PHY_ReadReg &rArr; HAL_ETH_ReadPHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PHY_WriteReg
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PHY_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8720_Init
</UL>

<P><STRONG><a name="[114]"></a>LAN8720_GetLinkState</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, lan8720.o(i.LAN8720_GetLinkState))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LAN8720_GetLinkState &rArr; HAL_ETH_ReadPHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Init
</UL>

<P><STRONG><a name="[115]"></a>LAN8720_Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, lan8720.o(i.LAN8720_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LAN8720_Init &rArr; LAN8720A_StartAutoNego &rArr; ETH_PHY_ReadReg &rArr; HAL_ETH_ReadPHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8720A_StartAutoNego
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Init
</UL>

<P><STRONG><a name="[117]"></a>LED_GPIO_Init</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, bsp_led.o(i.LED_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LED_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11c]"></a>MX_ETH_Init</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, ethernetif.o(i.MX_ETH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = MX_ETH_Init &rArr; HAL_ETH_Init &rArr; ETH_MACDMAConfig &rArr; ETH_SetMACConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialCmd_Execute
</UL>

<P><STRONG><a name="[11d]"></a>MX_TIM2_Init</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, bsp_generaltim.o(i.MX_TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_TIM2_Init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialCmd_Execute
</UL>

<P><STRONG><a name="[120]"></a>MX_TIM3_Init</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, bsp_generaltim.o(i.MX_TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MX_TIM3_Init &rArr; HAL_TIM_SlaveConfigSynchronization &rArr; TIM_SlaveTimer_SetConfig &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_SlaveConfigSynchronization
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialCmd_Execute
</UL>

<P><STRONG><a name="[121]"></a>MX_TIM4_Init</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, bsp_generaltim.o(i.MX_TIM4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_TIM4_Init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialCmd_Execute
</UL>

<P><STRONG><a name="[122]"></a>MX_UARTx_Init</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, bsp_debug_usart.o(i.MX_UARTx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = MX_UARTx_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCCEx_GetD3PCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCCEx_GetD1SysClockFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[123]"></a>MotorController_Init</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, motormotion.o(i.MotorController_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MotorController_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorToPulsePosition
</UL>

<P><STRONG><a name="[124]"></a>MotorController_Update</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, motormotion.o(i.MotorController_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MotorController_Update &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecat_loop
</UL>

<P><STRONG><a name="[125]"></a>MotorToPulsePosition</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, motormotion.o(i.MotorToPulsePosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MotorToPulsePosition &rArr; MotorController_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorController_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialCmd_Execute
</UL>

<P><STRONG><a name="[126]"></a>Motor_SoftStop</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, motormotion.o(i.Motor_SoftStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Motor_SoftStop &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialCmd_Execute
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.NMI_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NMI_Handler &rArr; HAL_RCC_NMI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_NMI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[127]"></a>PHY_Init</STRONG> (Thumb, 166 bytes, Stack size 136 bytes, ethernetif.o(i.PHY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = PHY_Init &rArr; LAN8720_Init &rArr; LAN8720A_StartAutoNego &rArr; ETH_PHY_ReadReg &rArr; HAL_ETH_ReadPHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Start_IT
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_SetMACFilterConfig
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_SetMACConfig
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_GetMACFilterConfig
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_GetMACConfig
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_DescAssignMemory
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_BuildRxDescriptors
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8720_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8720_GetLinkState
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialCmd_Execute
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[12e]"></a>ProcessReceivedData</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, system_command.o(i.ProcessReceivedData))
<BR><BR>[Stack]<UL><LI>Max Depth = 3932<LI>Call Chain = ProcessReceivedData &rArr; SerialCmd_Execute &rArr; ecat_init &rArr; ec_config_map &rArr; ec_config_map_group &rArr; ecx_config_map_group &rArr; ecx_config_find_mappings &rArr; ecx_map_coe_soe &rArr; ecx_readIDNmap &rArr; ecx_SoEread &rArr; ecx_mbxreceive &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialCmd_ParseLine
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialCmd_Execute
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[131]"></a>RecoverFromFault</STRONG> (Thumb, 360 bytes, Stack size 32 bytes, soem.o(i.RecoverFromFault))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RecoverFromFault &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[130]"></a>SerialCmd_Execute</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, system_command.o(i.SerialCmd_Execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 3892<LI>Call Chain = SerialCmd_Execute &rArr; ecat_init &rArr; ec_config_map &rArr; ec_config_map_group &rArr; ecx_config_map_group &rArr; ecx_config_find_mappings &rArr; ecx_map_coe_soe &rArr; ecx_readIDNmap &rArr; ecx_SoEread &rArr; ecx_mbxreceive &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SoftStop
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorToPulsePosition
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ETH_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecat_init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zeroer_CSPInit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReceivedData
</UL>

<P><STRONG><a name="[12f]"></a>SerialCmd_ParseLine</STRONG> (Thumb, 330 bytes, Stack size 152 bytes, system_command.o(i.SerialCmd_ParseLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SerialCmd_ParseLine &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReceivedData
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32h7xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>SystemInit</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, system_stm32h7xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(.text)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = TIM4_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; ecat_loop &rArr; ec_send_processdata &rArr; ec_send_processdata_group &rArr; ecx_main_send_processdata &rArr; ecx_outframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[e8]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, stm32h7xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[eb]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SlaveTimer_SetConfig
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[107]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[108]"></a>UART_CheckIdleState</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, stm32h7xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[106]"></a>UART_SetConfig</STRONG> (Thumb, 1252 bytes, Stack size 64 bytes, stm32h7xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = UART_SetConfig &rArr; HAL_RCCEx_GetD3PCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCCEx_GetD1SysClockFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[10b]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32h7xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, stm32h7xx_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 3940<LI>Call Chain = USART3_IRQHandler &rArr; ProcessReceivedData &rArr; SerialCmd_Execute &rArr; ecat_init &rArr; ec_config_map &rArr; ec_config_map_group &rArr; ecx_config_map_group &rArr; ecx_config_find_mappings &rArr; ecx_map_coe_soe &rArr; ecx_readIDNmap &rArr; ecx_SoEread &rArr; ecx_mbxreceive &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReceivedData
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[135]"></a>Zeroer_CSPInit</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, soem.o(i.Zeroer_CSPInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Zeroer_CSPInit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialCmd_Execute
</UL>

<P><STRONG><a name="[9d]"></a>Zeroer_Nsetup</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, soem.o(i.Zeroer_Nsetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 3556<LI>Call Chain = Zeroer_Nsetup &rArr; write8 &rArr; ec_SDOwrite &rArr; ecx_SDOwrite &rArr; ecx_mbxreceive &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write8
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write32
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write16
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soem.o(i.ecat_init)
</UL>
<P><STRONG><a name="[146]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1d1]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[116]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReceivedData
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoverFromFault
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SoftStop
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8720_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialCmd_Execute
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecat_init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zeroer_Nsetup
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zeroer_CSPInit
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_detect_slaves
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_map_group
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_map_sm
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_map_sii
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_map_coe_soe
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_lookup_prev_sii
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_lookup_mapping
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_create_output_mappings
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_create_input_mappings
</UL>

<P><STRONG><a name="[1d2]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1d3]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[148]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1d4]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[19d]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[1d5]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1d6]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[a8]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[1d7]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[1d8]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1d9]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1da]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[14e]"></a>bfin_EMAC_recv</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, ethernetif.o(i.bfin_EMAC_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bfin_EMAC_recv &rArr; HAL_ETH_GetRxDataBuffer &rArr; HAL_ETH_IsRxDataAvailable
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_GetRxDataLength
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_GetRxDataBuffer
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_BuildRxDescriptors
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_CleanInvalidateDCache
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_inframe
</UL>

<P><STRONG><a name="[151]"></a>bfin_EMAC_send</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ethernetif.o(i.bfin_EMAC_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_outframe
</UL>

<P><STRONG><a name="[153]"></a>ec_SDOwrite</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, ethercatcoe.o(i.ec_SDOwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 3508<LI>Call Chain = ec_SDOwrite &rArr; ecx_SDOwrite &rArr; ecx_mbxreceive &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write8
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write32
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write16
</UL>

<P><STRONG><a name="[155]"></a>ec_clearmbx</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ethercatmain.o(i.ec_clearmbx))
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOwrite
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOread
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SoEread
</UL>

<P><STRONG><a name="[156]"></a>ec_config_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ethercatconfig.o(i.ec_config_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = ec_config_init &rArr; ecx_config_init &rArr; ecx_siistring &rArr; ecx_siifind &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecat_init
</UL>

<P><STRONG><a name="[158]"></a>ec_config_map</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ethercatconfig.o(i.ec_config_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 3844<LI>Call Chain = ec_config_map &rArr; ec_config_map_group &rArr; ecx_config_map_group &rArr; ecx_config_find_mappings &rArr; ecx_map_coe_soe &rArr; ecx_readIDNmap &rArr; ecx_SoEread &rArr; ecx_mbxreceive &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_config_map_group
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecat_init
</UL>

<P><STRONG><a name="[159]"></a>ec_config_map_group</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ethercatconfig.o(i.ec_config_map_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 3844<LI>Call Chain = ec_config_map_group &rArr; ecx_config_map_group &rArr; ecx_config_find_mappings &rArr; ecx_map_coe_soe &rArr; ecx_readIDNmap &rArr; ecx_SoEread &rArr; ecx_mbxreceive &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_map_group
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_config_map
</UL>

<P><STRONG><a name="[15b]"></a>ec_configdc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ethercatdc.o(i.ec_configdc))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = ec_configdc &rArr; ecx_configdc &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_configdc
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecat_init
</UL>

<P><STRONG><a name="[15d]"></a>ec_dcsync0</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ethercatdc.o(i.ec_dcsync0))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = ec_dcsync0 &rArr; ecx_dcsync0 &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_dcsync0
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecat_init
</UL>

<P><STRONG><a name="[192]"></a>ec_findconfig</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ethercatconfig.o(i.ec_findconfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ec_findconfig
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_from_table
</UL>

<P><STRONG><a name="[15f]"></a>ec_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ethercatmain.o(i.ec_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ec_init &rArr; ecx_setupnic &rArr; ec_setupheader
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupnic
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecat_init
</UL>

<P><STRONG><a name="[184]"></a>ec_nextmbxcnt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ethercatmain.o(i.ec_nextmbxcnt))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOwrite
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOread
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SoEread
</UL>

<P><STRONG><a name="[161]"></a>ec_readstate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ethercatmain.o(i.ec_readstate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1124<LI>Call Chain = ec_readstate &rArr; ecx_readstate &rArr; ecx_FPRD_multi &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readstate
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecat_init
</UL>

<P><STRONG><a name="[16e]"></a>ec_receive_processdata</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ethercatmain.o(i.ec_receive_processdata))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecat_loop
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecat_init
</UL>

<P><STRONG><a name="[163]"></a>ec_receive_processdata_group</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ethercatmain.o(i.ec_receive_processdata_group), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_receive_processdata_group
</UL>

<P><STRONG><a name="[165]"></a>ec_send_processdata</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ethercatmain.o(i.ec_send_processdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = ec_send_processdata &rArr; ec_send_processdata_group &rArr; ecx_main_send_processdata &rArr; ecx_outframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_send_processdata_group
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecat_loop
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecat_init
</UL>

<P><STRONG><a name="[166]"></a>ec_send_processdata_group</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ethercatmain.o(i.ec_send_processdata_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = ec_send_processdata_group &rArr; ecx_main_send_processdata &rArr; ecx_outframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_main_send_processdata
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_send_processdata
</UL>

<P><STRONG><a name="[168]"></a>ec_setupheader</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, nicdrv.o(i.ec_setupheader))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ec_setupheader
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oshw_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupnic
</UL>

<P><STRONG><a name="[16a]"></a>ec_statecheck</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ethercatmain.o(i.ec_statecheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = ec_statecheck &rArr; ecx_statecheck &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_statecheck
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecat_init
</UL>

<P><STRONG><a name="[16c]"></a>ec_writestate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ethercatmain.o(i.ec_writestate))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = ec_writestate &rArr; ecx_writestate &rArr; ecx_FPWRw &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_writestate
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecat_init
</UL>

<P><STRONG><a name="[133]"></a>ecat_init</STRONG> (Thumb, 482 bytes, Stack size 40 bytes, soem.o(i.ecat_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 3884<LI>Call Chain = ecat_init &rArr; ec_config_map &rArr; ec_config_map_group &rArr; ecx_config_map_group &rArr; ecx_config_find_mappings &rArr; ecx_map_coe_soe &rArr; ecx_readIDNmap &rArr; ecx_SoEread &rArr; ecx_mbxreceive &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_writestate
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_statecheck
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_send_processdata
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_receive_processdata
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_readstate
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dcsync0
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_configdc
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_config_map
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_config_init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialCmd_Execute
</UL>

<P><STRONG><a name="[f7]"></a>ecat_loop</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, motormotion.o(i.ecat_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = ecat_loop &rArr; ec_send_processdata &rArr; ec_send_processdata_group &rArr; ecx_main_send_processdata &rArr; ecx_outframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorController_Update
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_send_processdata
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_receive_processdata
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[16f]"></a>ecx_APRD</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, ethercatbase.o(i.ecx_APRD))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = ecx_APRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupdatagram
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setbufstat
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_getindex
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APRDw
</UL>

<P><STRONG><a name="[174]"></a>ecx_APRDw</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, ethercatbase.o(i.ecx_APRDw))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = ecx_APRDw &rArr; ecx_APRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APRD
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[175]"></a>ecx_APWR</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, ethercatbase.o(i.ecx_APWR))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = ecx_APWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupdatagram
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setbufstat
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_getindex
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APWRw
</UL>

<P><STRONG><a name="[176]"></a>ecx_APWRw</STRONG> (Thumb, 22 bytes, Stack size 32 bytes, ethercatbase.o(i.ecx_APWRw))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = ecx_APWRw &rArr; ecx_APWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APWR
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[177]"></a>ecx_BRD</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, ethercatbase.o(i.ecx_BRD))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = ecx_BRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupdatagram
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setbufstat
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_getindex
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_statecheck
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_detect_slaves
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readstate
</UL>

<P><STRONG><a name="[178]"></a>ecx_BWR</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, ethercatbase.o(i.ecx_BWR))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = ecx_BWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupdatagram
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setbufstat
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_getindex
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_configdc
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_detect_slaves
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_set_slaves_to_default
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_writestate
</UL>

<P><STRONG><a name="[179]"></a>ecx_FPRD</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, ethercatbase.o(i.ecx_FPRD))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupdatagram
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setbufstat
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_getindex
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRDw
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_dcsync0
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_configdc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_statecheck
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeeprom2
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxreceive
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeepromFP
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxempty
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom_waitnotbusyFP
</UL>

<P><STRONG><a name="[17a]"></a>ecx_FPRD_multi</STRONG> (Thumb, 282 bytes, Stack size 320 bytes, ethercatmain.o(i.ecx_FPRD_multi))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = ecx_FPRD_multi &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupdatagram
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_adddatagram
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setbufstat
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_getindex
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readstate
</UL>

<P><STRONG><a name="[17c]"></a>ecx_FPRDw</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, ethercatbase.o(i.ecx_FPRDw))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = ecx_FPRDw &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[17d]"></a>ecx_FPWR</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, ethercatbase.o(i.ecx_FPWR))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupdatagram
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setbufstat
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_getindex
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWRw
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_dcsync0
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_configdc
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeeprom1
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2pdi
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2master
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_map_sm
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_create_output_mappings
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_create_input_mappings
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxsend
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxreceive
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeepromFP
</UL>

<P><STRONG><a name="[17e]"></a>ecx_FPWRw</STRONG> (Thumb, 22 bytes, Stack size 32 bytes, ethercatbase.o(i.ecx_FPWRw))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = ecx_FPWRw &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_map_group
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_writestate
</UL>

<P><STRONG><a name="[17f]"></a>ecx_SDOerror</STRONG> (Thumb, 82 bytes, Stack size 56 bytes, ethercatcoe.o(i.ecx_SDOerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ecx_SDOerror &rArr; osal_current_time
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_current_time
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_pusherror
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOwrite
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOread
</UL>

<P><STRONG><a name="[182]"></a>ecx_SDOread</STRONG> (Thumb, 738 bytes, Stack size 3064 bytes, ethercatcoe.o(i.ecx_SDOread))
<BR><BR>[Stack]<UL><LI>Max Depth = 3500<LI>Call Chain = ecx_SDOread &rArr; ecx_mbxreceive &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_packeterror
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxsend
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxreceive
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_nextmbxcnt
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_clearmbx
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOerror
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readPDOmapCA
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readPDOmap
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readPDOassignCA
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readPDOassign
</UL>

<P><STRONG><a name="[154]"></a>ecx_SDOwrite</STRONG> (Thumb, 868 bytes, Stack size 3040 bytes, ethercatcoe.o(i.ecx_SDOwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 3476<LI>Call Chain = ecx_SDOwrite &rArr; ecx_mbxreceive &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_packeterror
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxsend
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxreceive
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_nextmbxcnt
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_clearmbx
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOerror
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_SDOwrite
</UL>

<P><STRONG><a name="[187]"></a>ecx_SoEerror</STRONG> (Thumb, 76 bytes, Stack size 56 bytes, ethercatsoe.o(i.ecx_SoEerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ecx_SoEerror &rArr; osal_current_time
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_current_time
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_pusherror
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SoEread
</UL>

<P><STRONG><a name="[188]"></a>ecx_SoEread</STRONG> (Thumb, 440 bytes, Stack size 3040 bytes, ethercatsoe.o(i.ecx_SoEread))
<BR><BR>[Stack]<UL><LI>Max Depth = 3476<LI>Call Chain = ecx_SoEread &rArr; ecx_mbxreceive &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_packeterror
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxsend
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxreceive
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_nextmbxcnt
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_clearmbx
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SoEerror
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readIDNmap
</UL>

<P><STRONG><a name="[17b]"></a>ecx_adddatagram</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, ethercatbase.o(i.ecx_adddatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ecx_adddatagram
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_writedatagramdata
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_main_send_processdata
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD_multi
</UL>

<P><STRONG><a name="[157]"></a>ecx_config_init</STRONG> (Thumb, 1902 bytes, Stack size 64 bytes, ethercatconfig.o(i.ecx_config_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = ecx_config_init &rArr; ecx_siistring &rArr; ecx_siifind &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWRw
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRDw
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APWRw
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APRDw
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_statecheck
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siistring
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siigetbyte
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siifind
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiSMnext
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiSM
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiFMMU
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeeprom2
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeeprom1
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2pdi
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_init_context
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_detect_slaves
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_set_slaves_to_default
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_lookup_prev_sii
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_from_table
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_config_init
</UL>

<P><STRONG><a name="[15a]"></a>ecx_config_map_group</STRONG> (Thumb, 804 bytes, Stack size 88 bytes, ethercatconfig.o(i.ecx_config_map_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 3844<LI>Call Chain = ecx_config_map_group &rArr; ecx_config_find_mappings &rArr; ecx_map_coe_soe &rArr; ecx_readIDNmap &rArr; ecx_SoEread &rArr; ecx_mbxreceive &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWRw
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2pdi
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_find_mappings
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_create_output_mappings
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_create_input_mappings
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_config_map_group
</UL>

<P><STRONG><a name="[15c]"></a>ecx_configdc</STRONG> (Thumb, 1150 bytes, Stack size 136 bytes, ethercatdc.o(i.ecx_configdc))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = ecx_configdc &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BWR
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_current_time
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_prevport
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_porttime
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_parentport
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_configdc
</UL>

<P><STRONG><a name="[15e]"></a>ecx_dcsync0</STRONG> (Thumb, 306 bytes, Stack size 80 bytes, ethercatdc.o(i.ecx_dcsync0))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = ecx_dcsync0 &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dcsync0
</UL>

<P><STRONG><a name="[195]"></a>ecx_detect_slaves</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, ethercatconfig.o(i.ecx_detect_slaves))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = ecx_detect_slaves &rArr; ecx_BWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BWR
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BRD
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[1a5]"></a>ecx_eeprom2master</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, ethercatmain.o(i.ecx_eeprom2master))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = ecx_eeprom2master &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siigetbyte
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeeprom1
</UL>

<P><STRONG><a name="[1a1]"></a>ecx_eeprom2pdi</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, ethercatmain.o(i.ecx_eeprom2pdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = ecx_eeprom2pdi &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siistring
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siifind
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiSMnext
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiSM
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiPDO
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiFMMU
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_map_group
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[1a6]"></a>ecx_eeprom_waitnotbusyFP</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, ethercatmain.o(i.ecx_eeprom_waitnotbusyFP))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_usleep
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_start
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_is_expired
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeeprom2
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeeprom1
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeepromFP
</UL>

<P><STRONG><a name="[170]"></a>ecx_getindex</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, nicdrv.o(i.ecx_getindex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ecx_getindex
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BWR
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BRD
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APWR
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APRD
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_main_send_processdata
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD_multi
</UL>

<P><STRONG><a name="[1a9]"></a>ecx_inframe</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, nicdrv.o(i.ecx_inframe))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ecx_inframe &rArr; bfin_EMAC_recv &rArr; HAL_ETH_GetRxDataBuffer &rArr; HAL_ETH_IsRxDataAvailable
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bfin_EMAC_recv
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oshw_ntohs
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oshw_htons
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_waitinframe_red
</UL>

<P><STRONG><a name="[194]"></a>ecx_init_context</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, ethercatconfig.o(i.ecx_init_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = ecx_init_context &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siigetbyte
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[1b3]"></a>ecx_mbxempty</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, ethercatmain.o(i.ecx_mbxempty))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = ecx_mbxempty &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_usleep
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_start
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_is_expired
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxsend
</UL>

<P><STRONG><a name="[183]"></a>ecx_mbxreceive</STRONG> (Thumb, 574 bytes, Stack size 144 bytes, ethercatmain.o(i.ecx_mbxreceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = ecx_mbxreceive &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_usleep
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_start
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_is_expired
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_current_time
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_pusherror
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOwrite
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOread
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SoEread
</UL>

<P><STRONG><a name="[185]"></a>ecx_mbxsend</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, ethercatmain.o(i.ecx_mbxsend))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = ecx_mbxsend &rArr; ecx_mbxempty &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxempty
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOwrite
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOread
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SoEread
</UL>

<P><STRONG><a name="[1b4]"></a>ecx_outframe</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, nicdrv.o(i.ecx_outframe))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bfin_EMAC_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_outframe_red
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_waitinframe_red
</UL>

<P><STRONG><a name="[1ad]"></a>ecx_outframe_red</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, nicdrv.o(i.ecx_outframe_red))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = ecx_outframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oshw_htons
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_outframe
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_main_send_processdata
</UL>

<P><STRONG><a name="[186]"></a>ecx_packeterror</STRONG> (Thumb, 82 bytes, Stack size 56 bytes, ethercatmain.o(i.ecx_packeterror))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ecx_packeterror &rArr; osal_current_time
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_current_time
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_pusherror
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readPDOmapCA
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOwrite
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOread
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SoEread
</UL>

<P><STRONG><a name="[181]"></a>ecx_pusherror</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ethercatmain.o(i.ecx_pusherror))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ecx_pusherror
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_packeterror
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxreceive
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOerror
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SoEerror
</UL>

<P><STRONG><a name="[1b1]"></a>ecx_readIDNmap</STRONG> (Thumb, 346 bytes, Stack size 216 bytes, ethercatsoe.o(i.ecx_readIDNmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 3692<LI>Call Chain = ecx_readIDNmap &rArr; ecx_SoEread &rArr; ecx_mbxreceive &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SoEread
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_map_coe_soe
</UL>

<P><STRONG><a name="[1b5]"></a>ecx_readPDOassign</STRONG> (Thumb, 244 bytes, Stack size 80 bytes, ethercatcoe.o(i.ecx_readPDOassign))
<BR><BR>[Stack]<UL><LI>Max Depth = 3580<LI>Call Chain = ecx_readPDOassign &rArr; ecx_SDOread &rArr; ecx_mbxreceive &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOread
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readPDOmap
</UL>

<P><STRONG><a name="[1b6]"></a>ecx_readPDOassignCA</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, ethercatcoe.o(i.ecx_readPDOassignCA))
<BR><BR>[Stack]<UL><LI>Max Depth = 3572<LI>Call Chain = ecx_readPDOassignCA &rArr; ecx_SDOread &rArr; ecx_mbxreceive &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOread
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readPDOmapCA
</UL>

<P><STRONG><a name="[1b0]"></a>ecx_readPDOmap</STRONG> (Thumb, 380 bytes, Stack size 88 bytes, ethercatcoe.o(i.ecx_readPDOmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 3668<LI>Call Chain = ecx_readPDOmap &rArr; ecx_readPDOassign &rArr; ecx_SDOread &rArr; ecx_mbxreceive &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readPDOassign
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOread
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_map_coe_soe
</UL>

<P><STRONG><a name="[1af]"></a>ecx_readPDOmapCA</STRONG> (Thumb, 324 bytes, Stack size 80 bytes, ethercatcoe.o(i.ecx_readPDOmapCA))
<BR><BR>[Stack]<UL><LI>Max Depth = 3652<LI>Call Chain = ecx_readPDOmapCA &rArr; ecx_readPDOassignCA &rArr; ecx_SDOread &rArr; ecx_mbxreceive &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_packeterror
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readPDOassignCA
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOread
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_map_coe_soe
</UL>

<P><STRONG><a name="[197]"></a>ecx_readeeprom1</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, ethercatmain.o(i.ecx_readeeprom1))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = ecx_readeeprom1 &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2master
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom_waitnotbusyFP
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[198]"></a>ecx_readeeprom2</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, ethercatmain.o(i.ecx_readeeprom2))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = ecx_readeeprom2 &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom_waitnotbusyFP
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[1b7]"></a>ecx_readeepromFP</STRONG> (Thumb, 296 bytes, Stack size 96 bytes, ethercatmain.o(i.ecx_readeepromFP))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_usleep
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom_waitnotbusyFP
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siigetbyte
</UL>

<P><STRONG><a name="[162]"></a>ecx_readstate</STRONG> (Thumb, 396 bytes, Stack size 560 bytes, ethercatmain.o(i.ecx_readstate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1124<LI>Call Chain = ecx_readstate &rArr; ecx_FPRD_multi &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BRD
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD_multi
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_readstate
</UL>

<P><STRONG><a name="[164]"></a>ecx_receive_processdata_group</STRONG> (Thumb, 326 bytes, Stack size 56 bytes, ethercatmain.o(i.ecx_receive_processdata_group), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_waitinframe
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setbufstat
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_pullindex
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_receive_processdata_group
</UL>

<P><STRONG><a name="[173]"></a>ecx_setbufstat</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, nicdrv.o(i.ecx_setbufstat))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BWR
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BRD
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APWR
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APRD
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_waitinframe
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_receive_processdata_group
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD_multi
</UL>

<P><STRONG><a name="[171]"></a>ecx_setupdatagram</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ethercatbase.o(i.ecx_setupdatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ecx_setupdatagram
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_writedatagramdata
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BWR
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BRD
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APWR
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APRD
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_main_send_processdata
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD_multi
</UL>

<P><STRONG><a name="[160]"></a>ecx_setupnic</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, nicdrv.o(i.ecx_setupnic))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ecx_setupnic &rArr; ec_setupheader
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_setupheader
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_clear_rxbufstat
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_init
</UL>

<P><STRONG><a name="[1a0]"></a>ecx_siiFMMU</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, ethercatmain.o(i.ecx_siiFMMU))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = ecx_siiFMMU &rArr; ecx_siifind &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siigetbyte
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siifind
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2pdi
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[1b2]"></a>ecx_siiPDO</STRONG> (Thumb, 408 bytes, Stack size 56 bytes, ethercatmain.o(i.ecx_siiPDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = ecx_siiPDO &rArr; ecx_siifind &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siigetbyte
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siifind
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2pdi
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_map_sii
</UL>

<P><STRONG><a name="[19e]"></a>ecx_siiSM</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, ethercatmain.o(i.ecx_siiSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = ecx_siiSM &rArr; ecx_siifind &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siigetbyte
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siifind
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2pdi
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[19f]"></a>ecx_siiSMnext</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, ethercatmain.o(i.ecx_siiSMnext))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = ecx_siiSMnext &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siigetbyte
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2pdi
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[19a]"></a>ecx_siifind</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, ethercatmain.o(i.ecx_siifind))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = ecx_siifind &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siigetbyte
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2pdi
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siistring
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiSM
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiPDO
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiFMMU
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[19b]"></a>ecx_siigetbyte</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, ethercatmain.o(i.ecx_siigetbyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2master
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeepromFP
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siistring
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siifind
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiSMnext
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiSM
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiPDO
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiFMMU
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_init_context
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[19c]"></a>ecx_siistring</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, ethercatmain.o(i.ecx_siistring))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = ecx_siistring &rArr; ecx_siifind &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siigetbyte
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siifind
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2pdi
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[172]"></a>ecx_srconfirm</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, nicdrv.o(i.ecx_srconfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setbufstat
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_outframe_red
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_waitinframe_red
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_start
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_is_expired
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BWR
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BRD
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APWR
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APRD
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD_multi
</UL>

<P><STRONG><a name="[16b]"></a>ecx_statecheck</STRONG> (Thumb, 200 bytes, Stack size 64 bytes, ethercatmain.o(i.ecx_statecheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = ecx_statecheck &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BRD
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_usleep
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_start
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_is_expired
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_statecheck
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_map_coe_soe
</UL>

<P><STRONG><a name="[1b9]"></a>ecx_waitinframe</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, nicdrv.o(i.ecx_waitinframe), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setbufstat
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_waitinframe_red
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_receive_processdata_group
</UL>

<P><STRONG><a name="[16d]"></a>ecx_writestate</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, ethercatmain.o(i.ecx_writestate))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = ecx_writestate &rArr; ecx_FPWRw &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWRw
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BWR
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_writestate
</UL>

<P><STRONG><a name="[9b]"></a>fputc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, bsp_debug_usart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[152]"></a>low_level_output</STRONG> (Thumb, 54 bytes, Stack size 64 bytes, ethernetif.o(i.low_level_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Transmit
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_CleanInvalidateDCache
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bfin_EMAC_send
</UL>

<P><STRONG><a name="[94]"></a>main</STRONG> (Thumb, 418 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = main &rArr; SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoverFromFault
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SoftStop
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorToPulsePosition
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UARTx_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_GPIO_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY4_StateRead
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY3_StateRead
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY2_StateRead
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY1_StateRead
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CACHE_Enable
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[180]"></a>osal_current_time</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, osal.o(i.osal_current_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osal_current_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUSec
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSec
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_start
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_is_expired
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_configdc
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_packeterror
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxreceive
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOerror
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SoEerror
</UL>

<P><STRONG><a name="[1a8]"></a>osal_timer_is_expired</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, osal.o(i.osal_timer_is_expired))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osal_timer_is_expired &rArr; osal_current_time
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_current_time
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_waitinframe_red
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_usleep
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_statecheck
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxreceive
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxempty
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom_waitnotbusyFP
</UL>

<P><STRONG><a name="[1a7]"></a>osal_timer_start</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, osal.o(i.osal_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osal_timer_start &rArr; osal_current_time
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_current_time
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_waitinframe
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_waitinframe_red
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_usleep
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_statecheck
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxreceive
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxempty
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom_waitnotbusyFP
</UL>

<P><STRONG><a name="[18e]"></a>osal_usleep</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, osal.o(i.osal_usleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osal_usleep &rArr; osal_timer_start &rArr; osal_current_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_start
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_is_expired
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_statecheck
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_find_mappings
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxreceive
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeepromFP
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxempty
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom_waitnotbusyFP
</UL>

<P><STRONG><a name="[169]"></a>oshw_htons</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, oshw.o(i.oshw_htons))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_outframe_red
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_inframe
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_setupheader
</UL>

<P><STRONG><a name="[1aa]"></a>oshw_ntohs</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, oshw.o(i.oshw_ntohs))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_inframe
</UL>

<P><STRONG><a name="[145]"></a>write16</STRONG> (Thumb, 26 bytes, Stack size 32 bytes, soem.o(i.write16))
<BR><BR>[Stack]<UL><LI>Max Depth = 3540<LI>Call Chain = write16 &rArr; ec_SDOwrite &rArr; ecx_SDOwrite &rArr; ecx_mbxreceive &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_SDOwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zeroer_Nsetup
</UL>

<P><STRONG><a name="[144]"></a>write32</STRONG> (Thumb, 26 bytes, Stack size 32 bytes, soem.o(i.write32))
<BR><BR>[Stack]<UL><LI>Max Depth = 3540<LI>Call Chain = write32 &rArr; ec_SDOwrite &rArr; ecx_SDOwrite &rArr; ecx_mbxreceive &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_SDOwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zeroer_Nsetup
</UL>

<P><STRONG><a name="[143]"></a>write8</STRONG> (Thumb, 26 bytes, Stack size 32 bytes, soem.o(i.write8))
<BR><BR>[Stack]<UL><LI>Max Depth = 3540<LI>Call Chain = write8 &rArr; ec_SDOwrite &rArr; ecx_SDOwrite &rArr; ecx_mbxreceive &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_SDOwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zeroer_Nsetup
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1bc]"></a>CPU_CACHE_Enable</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, main.o(i.CPU_CACHE_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CPU_CACHE_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[118]"></a>MPU_Config</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, main.o(i.MPU_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MPU_Config &rArr; HAL_MPU_ConfigRegion
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Enable
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Disable
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_ConfigRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13b]"></a>SystemClock_Config</STRONG> (Thumb, 184 bytes, Stack size 136 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_EnableCSS
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[da]"></a>__NVIC_SetPriority</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[ee]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[f9]"></a>TIM_SlaveTimer_SetConfig</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32h7xx_hal_tim.o(i.TIM_SlaveTimer_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM_SlaveTimer_SetConfig &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_SlaveConfigSynchronization
</UL>

<P><STRONG><a name="[ec]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32h7xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SlaveTimer_SetConfig
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[ed]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32h7xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SlaveTimer_SetConfig
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[c2]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[c3]"></a>DMA_CalcDMAMUXChannelBaseAndMask</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32h7xx_hal_dma.o(i.DMA_CalcDMAMUXChannelBaseAndMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_CalcDMAMUXChannelBaseAndMask
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[c4]"></a>DMA_CalcDMAMUXRequestGenBaseAndMask</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32h7xx_hal_dma.o(i.DMA_CalcDMAMUXRequestGenBaseAndMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_CalcDMAMUXRequestGenBaseAndMask
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[c1]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32h7xx_hal_dma.o(i.DMA_CheckFifoParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_CheckFifoParam
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[c6]"></a>DMA_SetConfig</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, stm32h7xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[b7]"></a>ETH_MACDMAConfig</STRONG> (Thumb, 216 bytes, Stack size 152 bytes, stm32h7xx_hal_eth.o(i.ETH_MACDMAConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = ETH_MACDMAConfig &rArr; ETH_SetMACConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SetMACConfig
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SetDMAConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[d3]"></a>ETH_Prepare_Tx_Descriptors</STRONG> (Thumb, 698 bytes, Stack size 36 bytes, stm32h7xx_hal_eth.o(i.ETH_Prepare_Tx_Descriptors))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Transmit
</UL>

<P><STRONG><a name="[b9]"></a>ETH_SetDMAConfig</STRONG> (Thumb, 168 bytes, Stack size 20 bytes, stm32h7xx_hal_eth.o(i.ETH_SetDMAConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ETH_SetDMAConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMAConfig
</UL>

<P><STRONG><a name="[b8]"></a>ETH_SetMACConfig</STRONG> (Thumb, 416 bytes, Stack size 20 bytes, stm32h7xx_hal_eth.o(i.ETH_SetMACConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ETH_SetMACConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_SetMACConfig
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMAConfig
</UL>

<P><STRONG><a name="[97]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[9a]"></a>UART_DMAError</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(i.UART_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_GetError
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(i.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[98]"></a>UART_DMAReceiveCplt</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(i.UART_DMAReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAReceiveCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(i.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[99]"></a>UART_DMARxHalfCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(i.UART_DMARxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMARxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(i.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[fc]"></a>UART_EndRxTransfer</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[fb]"></a>UART_EndTxTransfer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(i.UART_EndTxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[fe]"></a>UART_Receive_IT</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[102]"></a>UART_Transmit_IT</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[14f]"></a>SCB_CleanInvalidateDCache</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ethernetif.o(i.SCB_CleanInvalidateDCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SCB_CleanInvalidateDCache
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bfin_EMAC_recv
</UL>

<P><STRONG><a name="[1ba]"></a>ecx_clear_rxbufstat</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nicdrv.o(i.ecx_clear_rxbufstat))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupnic
</UL>

<P><STRONG><a name="[1bb]"></a>ecx_waitinframe_red</STRONG> (Thumb, 294 bytes, Stack size 64 bytes, nicdrv.o(i.ecx_waitinframe_red))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_outframe
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_inframe
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_start
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_is_expired
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_waitinframe
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
</UL>

<P><STRONG><a name="[189]"></a>ecx_writedatagramdata</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ethercatbase.o(i.ecx_writedatagramdata))
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupdatagram
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_adddatagram
</UL>

<P><STRONG><a name="[18a]"></a>ecx_config_create_input_mappings</STRONG> (Thumb, 894 bytes, Stack size 112 bytes, ethercatconfig.o(i.ecx_config_create_input_mappings))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = ecx_config_create_input_mappings &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_map_group
</UL>

<P><STRONG><a name="[18b]"></a>ecx_config_create_output_mappings</STRONG> (Thumb, 850 bytes, Stack size 88 bytes, ethercatconfig.o(i.ecx_config_create_output_mappings))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = ecx_config_create_output_mappings &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_map_group
</UL>

<P><STRONG><a name="[18c]"></a>ecx_config_find_mappings</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, ethercatconfig.o(i.ecx_config_find_mappings))
<BR><BR>[Stack]<UL><LI>Max Depth = 3756<LI>Call Chain = ecx_config_find_mappings &rArr; ecx_map_coe_soe &rArr; ecx_readIDNmap &rArr; ecx_SoEread &rArr; ecx_mbxreceive &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_usleep
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_map_sm
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_map_sii
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_map_coe_soe
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_map_group
</UL>

<P><STRONG><a name="[191]"></a>ecx_config_from_table</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, ethercatconfig.o(i.ecx_config_from_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ecx_config_from_table &rArr; ec_findconfig
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_findconfig
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[1ab]"></a>ecx_lookup_mapping</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, ethercatconfig.o(i.ecx_lookup_mapping))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ecx_lookup_mapping &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_map_sii
</UL>

<P><STRONG><a name="[199]"></a>ecx_lookup_prev_sii</STRONG> (Thumb, 456 bytes, Stack size 40 bytes, ethercatconfig.o(i.ecx_lookup_prev_sii))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ecx_lookup_prev_sii &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[18d]"></a>ecx_map_coe_soe</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, ethercatconfig.o(i.ecx_map_coe_soe))
<BR><BR>[Stack]<UL><LI>Max Depth = 3732<LI>Call Chain = ecx_map_coe_soe &rArr; ecx_readIDNmap &rArr; ecx_SoEread &rArr; ecx_mbxreceive &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_statecheck
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readIDNmap
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readPDOmapCA
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readPDOmap
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_find_mappings
</UL>

<P><STRONG><a name="[18f]"></a>ecx_map_sii</STRONG> (Thumb, 338 bytes, Stack size 3152 bytes, ethercatconfig.o(i.ecx_map_sii))
<BR><BR>[Stack]<UL><LI>Max Depth = 3716<LI>Call Chain = ecx_map_sii &rArr; ecx_siiPDO &rArr; ecx_siifind &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiPDO
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_lookup_mapping
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_find_mappings
</UL>

<P><STRONG><a name="[190]"></a>ecx_map_sm</STRONG> (Thumb, 354 bytes, Stack size 48 bytes, ethercatconfig.o(i.ecx_map_sm))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = ecx_map_sm &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_find_mappings
</UL>

<P><STRONG><a name="[196]"></a>ecx_set_slaves_to_default</STRONG> (Thumb, 316 bytes, Stack size 112 bytes, ethercatconfig.o(i.ecx_set_slaves_to_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = ecx_set_slaves_to_default &rArr; ecx_BWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BWR
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[1a2]"></a>ecx_parentport</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, ethercatdc.o(i.ecx_parentport))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ecx_parentport
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_configdc
</UL>

<P><STRONG><a name="[1a3]"></a>ecx_porttime</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, ethercatdc.o(i.ecx_porttime))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_configdc
</UL>

<P><STRONG><a name="[1a4]"></a>ecx_prevport</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, ethercatdc.o(i.ecx_prevport))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ecx_prevport
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_configdc
</UL>

<P><STRONG><a name="[167]"></a>ecx_main_send_processdata</STRONG> (Thumb, 926 bytes, Stack size 128 bytes, ethercatmain.o(i.ecx_main_send_processdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = ecx_main_send_processdata &rArr; ecx_outframe_red &rArr; ecx_outframe &rArr; bfin_EMAC_send &rArr; low_level_output &rArr; HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupdatagram
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_adddatagram
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_outframe_red
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_getindex
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_pushindex
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_send_processdata_group
</UL>

<P><STRONG><a name="[1b8]"></a>ecx_pullindex</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ethercatmain.o(i.ecx_pullindex), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_receive_processdata_group
</UL>

<P><STRONG><a name="[1ae]"></a>ecx_pushindex</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ethercatmain.o(i.ecx_pushindex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ecx_pushindex
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_main_send_processdata
</UL>

<P><STRONG><a name="[149]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[147]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[14c]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[14b]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[9c]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
